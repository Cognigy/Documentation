name: build-vale-linter

trigger:
  - none # Disable automatic triggers on branches.

pr:
  - task/86067-vg-settings # Trigger pipeline on a specific Pull Request.

pool:
  vmImage: ubuntu-20.04

steps:
  # Step 1: Run Vale using Docker
  - script: |
      echo "Running Vale using Docker..."
      docker run --rm -v $(pwd)/styles:/styles \
                 -v $(pwd)/fixtures/styles/demo:/docs \
                 -w /docs \
                 jdkato/vale .
    displayName: 'Run Vale in Docker'

  # Step 2: Identify Modified Files in the PR
  - script: |
      echo "Configuring Git to use the Azure DevOps token..."
      git config --global credential.helper store
      echo "https://:$SYSTEM_ACCESSTOKEN@$(System.CollectionUri)" > ~/.git-credentials

      echo "Fetching target branch and identifying modified Markdown files..."
      echo "Target Branch: $SYSTEM_PULLREQUEST_TARGETBRANCH"
      echo "Source Branch: $SYSTEM_PULLREQUEST_SOURCEBRANCH"
      
      mkdir -p vale_bin
      git fetch origin "$SYSTEM_PULLREQUEST_TARGETBRANCH" || exit 1
      MODIFIED_FILES=$(git diff --name-only origin/"$SYSTEM_PULLREQUEST_TARGETBRANCH"..origin/"$SYSTEM_PULLREQUEST_SOURCEBRANCH")
      echo "$MODIFIED_FILES" | grep -E '\.md$' > filtered_files.txt || true
    displayName: 'Identify Modified Files'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  # Step 3: Run Vale on Filtered Files
  - script: |
      echo "Running Vale on modified Markdown files..."
      FILTERED_FILES=$(cat filtered_files.txt)
      if [ -z "$FILTERED_FILES" ]; then
        echo "No Markdown files to lint. Skipping."
        exit 0
      fi
      
      vale $FILTERED_FILES --output=JSON > vale-report.json || exit 1
      echo "Vale linting completed. Report saved to vale-report.json."
    displayName: 'Run Vale Linter'

  # Step 4: Publish Vale Report as Artifact
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'vale-report.json'
      artifactName: 'vale-report'
    displayName: 'Publish Vale Report Artifact'

  # Step 5: Post Artifact Link as PR Comment
  - script: |
      echo "Generating artifact URL and posting as PR comment..."
      ARTIFACT_URL="$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/build/builds/$(Build.BuildId)/artifacts?artifactName=vale-report&api-version=6.0-preview.1"
      
      COMMENT_BODY="### Vale Linter Report%0AThe Vale report is available [here]($ARTIFACT_URL)."
      
      curl -X POST -H "Authorization: Bearer $(System.AccessToken)" \
        -H "Content-Type: application/json" \
        -d "{\"comments\": [{\"content\": \"$COMMENT_BODY\"}]}" \
        "$(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullRequests/$(System.PullRequest.PullRequestId)/threads?api-version=7.1-preview.1"
    displayName: 'Post Artifact Link as PR Comment'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)